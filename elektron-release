#!/usr/bin/env bash

CMD=$1
ARG=$2

if [ -z "${CMD}" ];
then
    echo "Usage: ${0}: deploy-release [-f] | reset-release <version>"
    exit 0
fi

if [ -z "${OPERATING_ENV}" ];
then
    # default environment
    OPERATING_ENV=staging
fi

if [ ! -f "./etc/env/${OPERATING_ENV}.env" ];
then
    echo "Generating configuration for ${OPERATING_ENV}"
    pushd network
    ./run.sh ${OPERATING_ENV}
    popd
else
    echo "Configuration already exists for ${OPERATING_ENV}"
fi

source "./etc/env/${OPERATING_ENV}.env" || (echo "Error: config for ${OPERATING_ENV} not found" && exit 1)

ENV_NAME="${service_name}-${OPERATING_ENV}"

if [ 'deploy-release' == "${CMD}" ];
then
    echo "Running deploy for ${ENV_NAME}"

    current_branch=$(git branch | grep \* | cut -d ' ' -f2)
    if [ "${current_branch}" != 'master' ];
    then
        if [ "${ARG}" != '-f' ];
        then
            echo "Current branch is not master: [${current_branch}]."
            exit 1
        fi
    fi
    
    echo "Running unit tests in local env."
    pushd project
    OPERATING_ENV=local python manage.py test
    result=$?
    popd
    if [ "${result}" != "0" ];
    then
        echo "Error running unit tests."
        exit ${result}
    fi

    # echo "Running smoke test in dev environment."
    # docker build --file Dockerfile-Proxy --tag roja/elektron_proxy:latest .
    # docker build --file Dockerfile-App --build-arg="OPERATING_ENV=development" --tag roja/elektron_app:latest .
    # OPERATING_ENV=development ./scripts/tests/smoke_test.py
    # result=$?
    # if [ "${result}" != "0" ];
    # then
    #     echo "Error running smoke test."
    #     exit ${result}
    # fi

    read -n1 -rsp $'Press any key to continue with tagging release or Ctrl+C to exit...\n' key
    
    declare version
    if [ "$key" = '' ]; then
        version=$(cat ./version.txt | sed 's/\.dev0//')
        fullrelease --verbose --no-input
        result=$?
        if [ "${result}" -ne "0" ];
        then
            echo "Error bundling release."
            exit ${result}
        fi
    else
        echo 'Deploy cancelled.'
        exit 0
    fi

    if [ -z "${version}" ];
    then
        echo "Version not set."
        exit 1
    else
        echo "${version} ready for deploy."
    fi

    read -n1 -rsp $'Press any key to continue with deploy or Ctrl+C to exit...\n' key

    if [ "$key" = '' ]; then
        # key pressed, do something
        # echo [$key] is pressed # uncomment to trace
        echo "Release tagging successful, deploying application version ${version}"
        git checkout ${version}

        make all VERSION=${version}
        cwd=`pwd`
        processor_archive=`find ${cwd}/processor -name 'elektron-processor*.zip'`
        echo "Deploying new version of image processor at version ${version} from ${processor_archive}"
        export PYTHONPATH=${PYTHONPATH}:${cwd}/project
        pushd ${cwd}/project
        python3 scripts/photo-processor-deploy.py --archive=${processor_archive}
        result=$?
        popd
        if [ "${result}" -ne "0" ];
        then
            echo "ERROR: building/deploying photo processor archive was unsuccessful."
            exit ${result}
        fi

        ./elektron-deploy build ${OPERATING_ENV}

        `aws --output text lambda list-functions | grep ${service_name}-${OPERATING_ENV} > /dev/null 2>&1`

        if [ $? == 0 ];
        then
            ./elektron-deploy update ${OPERATING_ENV}
        else
            ./elektron-deploy deploy ${OPERATING_ENV}
        fi

        rm project/zappa_settings.json

        git checkout master
        exit $?
    else
        # Anything else pressed, do whatever else.
        # echo [$key] not empty
        echo 'Deploy cancelled.'
        exit 0
    fi
elif [ 'reset-release' == "${CMD}" ];
then
    version=${ARG}

    if [ -z "${version}" ];
    then
        echo "Usage: $0 reset-release <version>"
        exit 1
    fi

    git checkout master
    git tag --delete ${version}
    git push origin :refs/tags/${version}
    git reset HEAD~2
    git checkout -- ./CHANGES.md ./version.txt
    git push --force
fi
