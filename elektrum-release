#!/usr/bin/env bash

PATH="etc/bin:${PATH}"

function usage() {
    app=$1
    echo "Usage: ${app}: --help | (development|staging|production) [--force]"
    exit 1
}

function main() {
    env=$1

    log "Initializing environment for ${env}."
    source_env ${env}

    log "Confirming we're on the correct branch."
    check_branch

    log "Running unit tests before release."
    run_unit_tests

    log "Tagging current HEAD for this release."
    tag_release

    log "Deploying the tagged version to ${env}."
    deploy_version ${env}

    log "Setup project for new development."
    setup_new_version

    log "Finalizing release by pushing all commits."
    push_commits
}

function log() {
    msg=$1
    now=$(date +"%Y/%m/%d %H:%M:%S")
    echo "[${now}][BASH] ${msg}"
}

function push_commits() {
    read -n1 -rsp $'Press any key to push all commits for the release or Ctrl+C to exit...\n' key

    if [ "$key" = '' ]; then
        # git push --quiet
        # git push --quiet --tags
        log "Commit push sucessful."
    else
        log "Release cancelled when pushing commits."
        exit 1
    fi
}

function setup_new_version() {
    read -n1 -rsp $'Press any key to continue with new version setup or Ctrl+C to exit...\n' key

    if [ "$key" = '' ]; then
        version=$(read_version.py --dev --next)

        log "Updating project version to next dev version: ${version}."
        set_project_version.py --file pyproject.toml --version ${version}
        echo ${version} > version.txt

        log "Commit updates to version"
        git add pyproject.toml version.txt
        git commit --quiet --gpg-sign --message "Setup next development version: ${version}"

        log "Setup of new version ${version} sucessful."
    else
        log "Release cancelled when setting up new version."
        exit 1
    fi
}

function deploy_version() {
    read -n1 -rsp $'Press any key to continue with deploy or Ctrl+C to exit...\n' key

    if [ "$key" = '' ]; then
        env=$1
        version=$(read_version.py)

        log "Switching to tagged version ${version}"
        git checkout --quiet ${version}

        log "Build & deploy processor"
        pushd processor && make all && popd

        log "Deploying application"
        ./elektrum-deploy ${env}

        log "Finished deploying application, switching back to master."
        git checkout --quiet master

        log "Version ${version} deploy successful."
    else
        log "Release cancelled when deploying version."
        exit 1
    fi
}

function tag_release() {
    read -n1 -rsp $'Press any key to continue with tagging release or Ctrl+C to exit...\n' key

    if [ "$key" = '' ]; then
        version=$(read_version.py)

        log "Update version in project to ${version}"
        set_project_version.py --file pyproject.toml --version ${version}
        echo ${version} > version.txt

        log "Update change log version and add a new, empty unreleased section"
        VER=${version} perl -MPOSIX -pi.bak -le '$d=strftime "%Y-%m-%d", localtime time; s/\#\# Unreleased/\#\# Unreleased\n\n\n\#\# $ENV{VER} \($d\)/i' CHANGES.md
        rm CHANGES.md.bak

        log "Commit/tag updates to version & changelog"
        git add pyproject.toml version.txt CHANGES.md > /dev/null 2>&1
        git commit --quiet --gpg-sign --message "Set release version to ${version}"
        git tag --force --message "v${version}" --sign "${version}" > /dev/null 2>&1

        result=$?
        if [ "${result}" -ne "0" ];
        then
            log "Error bundling release."
            exit ${result}
        fi

    else
        log "Release cancelled when tagging release."
        exit 1
    fi
    log "Release tagging successful, ready to deploy application version ${version}"
}

function run_unit_tests() {
    pushd project > /dev/null 2>&1
#    python manage.py test
#    result=$?
    result=0
    popd > /dev/null 2>&1
    if [ "${result}" != "0" ];
    then
        log "Error running unit tests."
        exit ${result}
    fi
    log "Unit test run successful."
}

function check_branch() {
    current_branch=$(git branch | grep \* | cut -d ' ' -f2)
    if [ "${current_branch}" != 'master' ];
    then
        if [ "${FORCE}" == "--force" ];
        then
            log "Building a release even though current branch (${current_branch}) is not master."
        else
            log "ERROR: Current branch is not master: [${current_branch}]."
            exit 1
        fi
    fi
    log "Successfully checked current branch: ${current_branch}"
}

function source_env() {
    env=$1
    if [ ! -f "./etc/env/${env}.env" ];
    then
        log "Generating configuration for ${env}"
        pushd network
        ./run.sh ${env}
        popd
    else
        log "Configuration already exists for ${env}"
    fi

    env_file="./etc/env/${env}.env"
    source ${env_file} || (log "Error: config for ${env} not found" && exit 1)

    log "Successfully sourced environment from ${env_file}"
}


if [ "${1}" == '--help' ];
then
    usage $0
fi

OPERATING_ENV=${1}
FORCE=${2}

if [ -z "${OPERATING_ENV}" ];
then
    usage $0
fi

main ${OPERATING_ENV}
