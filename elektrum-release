#!/usr/bin/env bash

export PATH="etc/bin:${PATH}"
export PYTHONPATH="application"

function usage() {
    app=$1
    echo "Usage: ${app}: --help | (development|staging|production) [--force]"
    exit 1
}

function main() {
    log "Confirming we're on the correct branch."
    check_branch

    log "Running unit tests before release."
    run_unit_tests

    log "Tagging current HEAD for this release."
    tag_release

    log "Deploying the tagged version to ${OPERATING_ENV}."
    deploy_version

    log "Setup project for new development."
    setup_new_version

    log "Finalizing release by pushing all commits."
    push_commits

    log "Publish release to github."
    publish_release
}

function log() {
    msg=$1
    now=$(date +"%Y/%m/%d %H:%M:%S")
    echo "[${now}][RELEASE] ${msg}"
}

function publish_release() {
    read -n1 -rsp $'Press any key to publish release or Ctrl+C to exit...\n' key
    if [ "$key" = '' ]; then
        tag_name=$(git tag --sort creatordate -n1 | tail -1 | awk '{ print $1}')
        release_name=$(git tag --sort creatordate -n1 | tail -1 | awk '{ print $2}')

        result=$(publish_release.py -v ${tag_name} -r "${release_name}" )

        log result

        export SENTRY_AUTH_TOKEN=${SENTRY_AUTH_TOKEN}
        export SENTRY_ORG="${SERVICE_NAME}"
        prg_name="${SERVICE_NAME}-service"
        release_commit=$(git tag --sort=-v:refname --format='%(tag) %(*objectname)' | grep --fixed-strings ${tag_name} | awk '{ print $2 }')
        release_ref="ebridges/elektrum@${release_commit}"
        release_url="https://github.com/ebridges/elektrum/releases/tag/${tag_name}"
        sentry-cli releases new --project "${prg_name}" --url "${release_url}" "${tag_name}"
        sentry-cli releases set-commits --commit "${release_ref}" "${tag_name}"
        sentry-cli releases finalize "${tag_name}"
        sentry-cli releases deploys "${tag_name}" new --name "${prg_name}-${ENVIRONMENT}/${release_name}" --env "${ENVIRONMENT}"
    else
        log "Release cancelled when publishing."
        exit 1
    fi
}


function push_commits() {
    read -n1 -rsp $'Press any key to push all commits for the release or Ctrl+C to exit...\n' key

    if [ "$key" = '' ]; then
        git push
        git push --tags
        log "Commit push sucessful."
    else
        log "Release cancelled when pushing commits."
        exit 1
    fi
}

function setup_new_version() {
    read -n1 -rsp $'Press any key to continue with new version setup or Ctrl+C to exit...\n' key

    if [ "$key" = '' ]; then
        version=$(application/elektrum/build/version_info.py --dev --next --version_file=application/version.txt)

        log "Updating project version to next dev version: ${version}."
        set_project_version.py --file pyproject.toml --version ${version}
        echo ${version} > application/version.txt

        log "Commit updates to version"
        git add pyproject.toml application/version.txt
        git commit --quiet --gpg-sign --message "Setup next development version: ${version}"

        log "Setup of new version ${version} sucessful."
    else
        log "Release cancelled when setting up new version."
        exit 1
    fi
}

function deploy_version() {
    read -n1 -rsp $'Press any key to continue with deploy or Ctrl+C to exit...\n' key

    if [ "$key" = '' ]; then
        version=$(application/elektrum/build/version_info.py --version_file=application/version.txt)

        log "Switching to tagged version ${version}"
        git checkout --quiet ${version}

        log "Deploying application"
        ./build ${OPERATING_ENV}

        log "Finished deploying application, switching back to master."
        git checkout --quiet master

        log "Version ${version} deployed successfully to ${OPERATING_ENV}."
    else
        log "Release cancelled when deploying version."
        exit 1
    fi
}

function tag_release() {
    read -n1 -rsp $'Press any key to continue with tagging release or Ctrl+C to exit...\n' key

    if [ "$key" = '' ]; then
        version=$(application/elektrum/build/version_info.py --version_file=application/version.txt)

        log "Update version in project to ${version}"
        set_project_version.py --file pyproject.toml --version ${version}
        echo ${version} > application/version.txt

        log "Update change log version and add a new, empty unreleased section"
        VER=${version} perl -MPOSIX -pi.bak -le '$d=strftime "%Y-%m-%d", localtime time; s/\#\# Unreleased/\#\# Unreleased\n\n\n\#\# $ENV{VER} \($d\)/i' CHANGES.md
        rm CHANGES.md.bak

        log "Commit/tag updates to version & changelog"
        git add pyproject.toml application/version.txt CHANGES.md > /dev/null 2>&1
        git commit --quiet --gpg-sign --message "Release version ${version}"
        git tag --force --message "v${version}" --sign "${version}" > /dev/null 2>&1

        result=$?
        if [ "${result}" -ne "0" ];
        then
            log "Error bundling release."
            exit ${result}
        fi

    else
        log "Release cancelled when tagging release."
        exit 1
    fi
    log "Release tagging successful, ready to deploy application version ${version}"
}

function run_unit_tests() {
    pushd application > /dev/null 2>&1
    python manage.py test
    result=$?
    result=0
    popd > /dev/null 2>&1
    if [ "${result}" != "0" ];
    then
        log "Error running unit tests."
        exit ${result}
    fi
    log "Unit test run successful."
}

function check_branch() {
    current_branch=$(git branch | grep \* | cut -d ' ' -f2)
    if [ "${current_branch}" != 'master' ];
    then
        if [ "${FORCE}" == "--force" ];
        then
            log "Building a release even though current branch (${current_branch}) is not master."
        else
            log "ERROR: Current branch is not master: [${current_branch}]."
            exit 1
        fi
    fi
    log "Successfully checked current branch: ${current_branch}"
}

command -v git >/dev/null 2>&1 || { echo >&2 "Command 'git' not installed. Install using `brew install git`.  Aborting."; exit 1; }

if [ "${1}" == '--help' ];
then
    usage $0
fi

OPERATING_ENV=${1}
FORCE=${2}

if [ -z "${OPERATING_ENV}" ];
then
    usage $0
fi

# among other things, incorporate SENTRY_AUTH_TOKEN in env
source etc/env/${OPERATING_ENV}.env

main
