- ec2_vpc_net_facts:
    filters:
      "tag:Service": "{{ service_name }}"
  register: vpc_facts

- debug: var=vpc_facts

- set_fact:
    vpc_id: "{{ vpc_facts.vpcs[0].vpc_id }}"

- debug: var=vpc_id

- ec2_vpc_subnet_facts:
    filters:
        vpc-id: "{{ vpc_id }}"
        "tag:Service": "{{ service_name }}"
        "tag:Visibility": "private"
  register: private_subnet_facts

- debug: var=private_subnet_facts

- set_fact:
    private_subnet_ids: "{{ private_subnet_facts.subnets|map(attribute='subnet_id')|list }}"

- debug: var=private_subnet_ids

- ec2_vpc_subnet_facts:
    filters:
        vpc-id: "{{ vpc_id }}"
        "tag:Service": "{{ service_name }}"
        "tag:Visibility": "public"
  register: public_subnet_facts

- debug: var=public_subnet_facts

- set_fact:
    public_subnet_ids: "{{ public_subnet_facts.subnets|map(attribute='subnet_id')|list }}"

- debug: var=public_subnet_ids

- name: look up the private security group id
  ec2_group_facts:
    filters:
      "tag:Name": "{{ vpc_name }}-private-sg"
  register: private_security_group

- debug: var=private_security_group

- set_fact:
    private_security_group_id: "{{ private_security_group.security_groups[0].group_id }}"

- debug: var=private_security_group_id

- name: look up the public security group id
  ec2_group_facts:
    filters:
      "tag:Name": "{{ vpc_name }}-public-sg"
  register: public_security_group

- debug: var=public_security_group

- set_fact:
    public_security_group_id: "{{ public_security_group.security_groups[0].group_id }}"

- debug: var=public_security_group_id

- name: look up the nat security group id
  ec2_group_facts:
    filters:
      "tag:Name": "{{ vpc_name }}-nat-sg"
  register: nat_security_group

- debug: var=nat_security_group

- set_fact:
    nat_security_group_id: "{{ nat_security_group.security_groups[0].group_id }}"

- name: look up rds info
  rds_instance_facts:
    db_instance_identifier: "{{ db_instance_name }}"
  register: rds

- debug: var=rds

- set_fact:
    db_endpoint_url: "{{ rds.instances[0].endpoint.address }}"

- debug: var=db_endpoint_url

- set_fact:
    db_port_number: "{{ rds.instances[0].endpoint.port }}"

- debug: var=db_port_number

- set_fact:
    db_name: "{{ rds.instances[0].db_name }}"

- debug: var=db_name

- set_fact:
    db_username: "{{ rds.instances[0].master_username }}"

- debug: var=db_username

- set_fact:
    db_instance: "{{ rds.instances[0].db_instance_identifier }}"

- debug: var=db_instance

- name: get iam role facts
  iam_role_facts:
    name: 'imageService-photoProcessor'
  register: photo_processor_role_info

- debug: var=photo_processor_role_info

- name: set photo processor role arn as fact
  set_fact:
    photo_processor_role_arn: "{{ photo_processor_role_info.iam_roles[0].arn }}"

- name: obtain acm facts for "{{ application_domain_name }}"
  aws_acm_facts:
    domain_name: "{{ application_domain_name }}"
  register: acm_facts

- debug: var=acm_facts

- name: set ARN of HTTPS certificate as fact
  set_fact:
     https_certificate_arn: "{{ acm_facts.certificates[0].certificate_arn }}"

- name: obtain cdn facts for application server
  cloudfront_facts:
    summary: true
  register: cdn_facts
  tags: debug

- debug: var=cdn_facts
  tags: debug

- set_fact:
    domain_name_query: "ansible_facts.cloudfront.summary.distributions[?Aliases[0] == `{{ application_domain_name }}`]|[0].DomainName"

- name: set domain name of CDN distribution as a fact
  set_fact:
     application_cdn_host: "{{ cdn_facts|json_query(domain_name_query) }}"
