---
- name: ensure config file exists
  copy:
    content: ""
    dest: "{{ config_info }}"
    force: no

- name: Output service name
  lineinfile:
    path: "{{ config_info }}"
    regexp: "^service_name='{{ service_name }}'"
    line: "service_name='{{ service_name }}'"
  tags:
    - cfg

- name: Output db host info
  lineinfile:
    path: "{{ config_info }}"
    regexp: "^db_hostname='{{ db_endpoint_url }}'"
    line: "db_hostname='{{ db_endpoint_url }}'"
  tags:
    - cfg

- name: store db port info
  lineinfile:
    path: "{{ config_info }}"
    regexp: "^db_port_num='{{ db_port_number }}'"
    line: "db_port_num='{{ db_port_number }}'"
  tags:
    - cfg

- name: store db name
  lineinfile:
    path: "{{ config_info }}"
    regexp: "^db_name='{{ db_name }}'"
    line: "db_name='{{ db_name }}'"
  tags:
    - cfg

- name: store db username
  lineinfile:
    path: "{{ config_info }}"
    regexp: "^db_username='{{ rds_app_username }}'"
    line: "db_username='{{ rds_app_username }}'"
  tags:
    - cfg

- name: store db password
  lineinfile:
    path: "{{ config_info }}"
    regexp: "^db_password='{{ rds_app_password | replace('\n', '') }}'"
    line: "db_password='{{ rds_app_password | replace('\n', '') }}'"
  when: elektron_env != 'development'
  tags:
    - cfg
    
- name: store vpc info (id)
  lineinfile:
    path: "{{ config_info }}"
    regexp: "^vpc_id='{{ vpc_id }}'"
    line: "vpc_id='{{ vpc_id }}'"
  tags:
    - cfg

- set_fact:
    sn_ids='{{ public_subnet_ids|join(',') }}'
  tags:
    - cfg

- name: store vpc info (subnet ids)
  lineinfile:
    path: "{{ config_info }}"
    regexp: "^vpc_public_subnet_ids='{{ sn_ids }}'"
    line: "vpc_public_subnet_ids='{{ sn_ids }}'"
  tags:
    - cfg

- name: store vpc info (security group id)
  lineinfile:
    path: "{{ config_info }}"
    regexp: "^vpc_security_group_ids='{{ public_security_group_id }}'"
    line: "vpc_security_group_ids='{{ public_security_group_id }}'"
  tags:
    - cfg

- name: store ecr repository host info
  lineinfile:
    path: "{{ config_info }}"
    regexp: "^ecr_host='{{ repository_uri_host }}'"
    line: "ecr_host='{{ repository_uri_host }}'"
  tags:
    - cfg

- name: store photo processor role ARN
  lineinfile:
    path: "{{ config_info }}"
    regexp: "^photo_processor_role_arn='{{ photo_processor_role_arn }}'"
    line: "photo_processor_role_arn='{{ photo_processor_role_arn }}'"
  tags:
    - cfg

- name: store media storage bucket name
  lineinfile:
    path: "{{ config_info }}"
    regexp: "^media_upload_bucket_name='{{ media_upload_bucket_name }}'"
    line: "media_upload_bucket_name='{{ media_upload_bucket_name }}'"
  tags:
    - cfg

- name: lambda function artifact storage bucket name
  lineinfile:
    path: "{{ config_info }}"
    regexp: "^media_processor_artifact_bucket_name='{{ media_processor_artifact_bucket_name }}'"
    line: "media_processor_artifact_bucket_name='{{ media_processor_artifact_bucket_name }}'"
  tags:
    - cfg

- name: store application domain name
  lineinfile:
    path: "{{ config_info }}"
    regexp: "^application_domain_name='{{ application_domain_name }}'"
    line: "application_domain_name='{{ application_domain_name }}'"
  tags:
    - cfg

- name: store cname for media storage
  lineinfile:
    path: "{{ config_info }}"
    regexp: "^media_storage_cname='{{ media_cname }}'"
    line: "media_storage_cname='{{ media_cname }}'"
  tags:
    - cfg
