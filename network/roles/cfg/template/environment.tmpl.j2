# Below variables are auto-generated from network/cfg
# Defaults are configured via network/group_vars
# run `cd network && ./run.sh [development|staging|production]` to update

### Expose current environment as a variable.
ENVIRONMENT='{{ operating_env }}'

### Contact info used by Django's AdminEmailHandler
ADMIN_CONTACT_NAME='{{ admin_contact_name }}'
ADMIN_CONTACT_EMAIL='{{ admin_contact_email }}'

### Autho token for monitoring Service
SENTRY_AUTH_TOKEN='{{ sentry_auth_token }}'

### Application name (used for info purposes)
SERVICE_NAME='{{ service_name }}'

### Django config
DJANGO_DEBUG_ENABLED='{{django_debug_enabled}}'
DJANGO_SECRET_KEY='{{django_secret_key}}'
DJANGO_ALLOWED_HOSTS='{{django_allowed_hosts}}'

## Email Configuration
DJANGO_EMAIL_BACKEND='{{django_email_backend}}'

### AWS Info
AWS_REGION='{{ aws_region }}'
HTTPS_CERTIFICATE_ARN='{{ https_certificate_arn }}'

### Database Connect Info
DB_HOSTNAME='{{ db_endpoint_url }}'
DB_PORT_NUM='{{ db_port_number }}'
DB_NAME='{{ rds_database_name }}'
DB_USERNAME='{{ rds_master_username }}'
DB_PASSWORD='{{ rds_master_password }}'

## Network configuration
VPC_PRIVATE_SUBNET_IDS='{{ private_subnet_ids|join(',') }}'
VPC_NAT_SECURITY_GROUP_IDS='{{ nat_security_group_id }}'
VPC_PUBLIC_SUBNET_IDS='{{ public_subnet_ids|join(',') }}'
VPC_ID='{{ vpc_id }}'
VPN_SERVER_CERTIFICATE_ARN='{{ vpn_certificate_arn }}'
VPN_CLIENT_CA_CERTIFICATE_ARN='{{ vpn_client_ca_certificate_arn }}'

## S3 Buckets
MEDIA_UPLOAD_BUCKET_NAME='{{ media_upload_bucket_name }}'
MEDIA_THUMBS_BUCKET_NAME='{{ media_thumbnail_bucket_name }}'
MEDIA_PROCESSOR_ARTIFACT_BUCKET_NAME='{{ media_processor_artifact_bucket_name }}'
STATIC_FILES_BUCKET_NAME='{{ static_files_bucket_name }}'

## Application domain names
APPLICATION_DOMAIN_NAME='{{ application_domain_name }}'
MEDIA_STORAGE_CNAME='{{ media_cname }}'
STATIC_DOMAIN_NAME='{{ static_cname }}'
THUMBNAIL_DOMAIN_NAME='{{ thumbnail_cname }}'

## API gateway configuration
CLOUDWATCH_LOG_ROLE_ARN='{{ api_gateway_logging_role_arn }}'

## Media Processor Configuration
MEDIA_PROCESSOR_LAMBDA_NAME='{{ media_processor_lambda_name }}'
MEDIA_PROCESSOR_LAMBDA_ARN='{{ media_processor_lambda_arn }}'
MEDIA_PROCESSOR_LAMBDA_HANDLER='{{ media_processor_lambda_handler }}'
MEDIA_PROCESSOR_DESCRIPTION='{{ media_processor_description }}'
#MEDIA_PROCESSOR_EXECUTION_ROLE_ARN='{{ lambda_execution_role_arn }}'
MEDIA_PROCESSOR_ROLE_ARN='{{ media_processor_role_arn }}'
MEDIA_PROCESSOR_SUBNET_IDS='{{ private_subnet_ids|join(",") }}'
MEDIA_PROCESSOR_SECURITY_GROUPS='{{ nat_security_group_id }}'
MEDIA_PROCESSOR_MEMORY_SIZE='{{ media_processor_memory_size }}'
MEDIA_PROCESSOR_TIMEOUT='{{ media_processor_connection_timeout }}'
MEDIA_PROCESSOR_TAGS='{{ media_processor_tags }}'
MEDIA_PROCESSOR_ENVIRONMENT='{{ media_processor_env }}'
MEDIA_PROCESSOR_RUNTIME='{{ media_processor_runtime }}'

## deployment options: these names are specified/required by the `lgw` command
AWS_LAMBDA_NAME='{{ service_name }}-{{ operating_env }}'
AWS_LAMBDA_DESCRIPTION='{{ service_name }} entry point'
AWS_LAMBDA_HANDLER='{{ service_name }}.lambda.handler'
AWS_LAMBDA_ARCHIVE_BUCKET='{{ media_processor_artifact_bucket_name }}'
AWS_LAMBDA_VPC_SUBNETS='{{ private_subnet_ids|join(',') }}'
AWS_LAMBDA_VPC_SECURITY_GROUPS='{{ nat_security_group_id }}'
AWS_LAMBDA_TAGS='Name={{ service_name }}-{{ operating_env }};Service={{ service_name }};Environment={{ operating_env }}'
AWS_LAMBDA_ARCHIVE_ADDL_FILES='etc/env/{{ operating_env }}.env,$wkdir/.env;version.txt,$wkdir;requirements.txt,$wkdir;project/,$wkdir'
AWS_LAMBDA_ARCHIVE_ADDL_PACKAGES='postgresql,postgresql-devel'
AWS_LAMBDA_EXECUTION_ROLE_ARN='{{ lambda_execution_role_arn }}'
AWS_API_LAMBDA_INTEGRATION_ROLE='{{ api_gateway_logging_role_arn }}'
AWS_API_NAME='{{ service_name }}-{{ operating_env }}-api'
AWS_API_DEPLOY_STAGE='{{ operating_env }}'
AWS_API_DOMAIN_NAME='{{ application_domain_name }}'
AWS_ACM_CERTIFICATE_ARN='{{ https_certificate_arn }}'
AWS_LAMBDA_CONNECTION_TIMEOUT={{ elektrum_service_connection_timeout }}
AWS_LAMBDA_ENVIRONMENT='DJANGO_LOG_LEVEL=INFO'
