---
- name: create the rds subnet group
  rds_subnet_group:
    state: present
    region: "{{ aws_region }}"
    name: "{{ rds_subnet_group_name }}"
    description: '{{ rds_instance_name }} RDS subnet group'
    subnets: "{{ private_subnet_ids }}"

- name: create a parameter group
  rds_param_group:
    state: present
    name: "{{ rds_parameter_group_name }}"
    description: "Parameters for {{ service_name }}"
    engine: postgres11
    region: "{{ aws_region }}"
    params:
      max_connections: "{{ rds_max_connections | int }}"
      shared_buffers: "{{ rds_shared_buffers | int }}"
      effective_cache_size: "{{ rds_effective_cache_size | int }}"
      work_mem: "{{ rds_work_mem | int }}"
    tags:
      Service: "{{ service_name }}"
      Name: "{{ rds_parameter_group_name }}"
      Environment: "{{ elektron_env }}"

- name: Create Postgresql RDS instance using SSD storage
  command: "aws rds create-db-instance
            --db-instance-identifier {{ rds_instance_name }}
            --db-name {{ rds_database_name }}
            --storage-type {{ rds_storage_type }}
            --allocated-storage {{ rds_storage_size }}
            --db-instance-class {{ rds_instance_type }}
            --engine postgres
            --engine-version 11
            --master-username {{ rds_master_username }}
            --master-user-password {{ rds_master_password }}
            --vpc-security-group-ids {{ private_security_group_id }}
            --db-subnet-group-name {{ rds_subnet_group_name }}
            --db-parameter-group-name {{ rds_parameter_group_name }}
            --port 5432
            --no-multi-az"
  register: result
  failed_when: >
    result.rc != 0 and ('DBInstanceAlreadyExists' not in result.stderr)
  changed_when: "result.rc == 0"

- name: Wait for Postgresql RDS to be available
  rds:
    command: facts
    region: "{{ aws_region }}"
    instance_name: "{{ rds_instance_name }}"
  register: result
  until: result.instance.status == "available"
  retries: 20
  delay: 60

- rds_instance_facts:
    db_instance_identifier: "{{ rds_instance_name }}"
  register: rds
  
- debug: var=rds

# - name: establish the RDS instance
#   rds:
#     command: create
#     db_engine: postgres
#     db_name: "{{ rds_database_name }}"
#     instance_name: "{{ rds_instance_name }}"
#     instance_type: "{{ rds_instance_type }}"
#     iops: "{{ rds_storage_type | int }}"
#     multi_zone: "{{ rds_multi_zone | bool }}"
#     parameter_group: "{{ rds_parameter_group_name }}"
#     port: "{{ rds_listen_port | int }}"
#     publicly_accessible: "{{ rds_publicly_accessible | bool }}"
#     region: "{{ aws_region }}"
#     size: "{{ rds_storage_size | int }}"
#     subnet: "{{ rds_subnet_group_name }}"
#     upgrade: "{{ rds_upgrade_instance | bool }}"
#     username: "{{ rds_master_username }}"
#     password: "{{ rds_master_password }}"
#     vpc_security_groups: "{{ private_security_group_id }}"
#     wait_timeout: "{{ rds_wait_timeout | int }}"
#     wait: "{{ rds_wait_for_creation | bool }}"
#     tags:
#       Service: "{{ service_name }}"
#       Name: "{{ rds_instance_name }}/{{ rds_database_name }}"
#       Environment: "{{ elektron_env }}"
#   register: rds

# - name: enable iam authentication
#   rds_instance:
#     db_instance_identifier: "{{ rds.instance.endpoint }}"
#     enable_iam_database_authentication: yes

# - name: create non-privileged user
#   postgresql_user:
#     login_host: "{{ rds.instance.endpoint }}"
#     login_user: "{{ rds_master_username }}"
#     login_password: "{{ rds_master_password }}"
#     db: "{{ rds_database_name }}"
#     name: "{{ rds_app_username }}"
#     password: "{{ rds_app_password }}"
#     role_attr_flags: NOSUPERUSER

# - name: modify the RDS instance to not be publicly accessible
#   rds:
#     command: modify
#     instance_name: "{{ rds_instance_name }}"
#     publicly_accessible: no
#     vpc_security_groups: "{{ private_security_group_id }}"

- set_fact:
    db_endpoint_url: "{{ rds.instances[0].endpoint.address }}"

- debug: var=db_endpoint_url

- set_fact:
    db_port_number: "{{ rds.instances[0].endpoint.port }}"

- debug: var=db_port_number
