- name: lookup vpc id
  ec2_vpc_net_facts:
    filters:
      "tag:Service": "{{ service_name }}"
  register: vpc_facts

- set_fact:
    vpc_id: "{{ vpc_facts.vpcs[0].vpc_id }}"

- name: look up security group ids
  ec2_group_facts:
    filters:
      vpc-id: "{{ vpc_id }}"
      "tag:Name": 
      - "allow-public-http"
  register: sg

- set_fact: 
    security_group_ids: "{{ sg.security_groups|map(attribute='group_id')|list }}"

- name: look up subnet ids
  ec2_vpc_subnet_facts:
    filters:
      vpc-id: "{{ vpc_id }}"
      "tag:Service": "{{ service_name }}"
      "tag:Visibility": "public"
  register: subnet_facts

- debug: var=subnet_facts

- set_fact:
   subnet_ids: "{{ subnet_facts.subnets|map(attribute='subnet_id')|list }}"

- name: lookup ec2 instance info 
  ec2_instance_facts:
    filters:
      "network-interface.subnet-id": "{{ subnet_ids }}"
  register: ec2_instance_info

- debug: var=ec2_instance_info

### TODO move hardcoded port number to group_vars/all.yml
- set_fact:
    elb_targets: "{{ elb_targets|default([]) + [ {'Id': item, 'Port': 80} ] }}"
  with_items: "{{ ec2_instance_info.instances|map(attribute='instance_id')|list }}"

- debug: var=elb_targets

- name: set tag names
  set_fact:
    elb_tags:

### TODO move hardcoded port number to group_vars/all.yml
- name: create elb target group
  elb_target_group:
    name: "{{ elb_target_group_name }}"
    protocol: http
    port: 80
    vpc_id: "{{ vpc_id }}"
    # health_check_path: /hello.html
    # successful_response_codes: "200"
    target_type: instance
    targets: "{{ elb_targets }}"
    state: present
    wait_timeout: 200
    wait: True
    tags:
       Service: "{{ service_name }}"
       Name: "{{ elb_target_group_name }}"  


### TODO move hardcoded port number to group_vars/all.yml
- name: configure instance listeners for elb
  set_fact:
    aws_elb_instance_listeners:
      - Protocol: HTTP # Required. The protocol for connections from clients to the load balancer (HTTP or HTTPS) (case-sensitive).
        Port: 80 # Required. The port on which the load balancer is listening.
        # The security policy that defines which ciphers and protocols are supported. The default is the current predefined security policy.
        DefaultActions:
          - Type: forward # Required. Only 'forward' is accepted at this time
            TargetGroupName: "{{ elb_target_group_name }}" # Required. The name of the target group
      - Protocol: HTTPS # Required. The protocol for connections from clients to the load balancer (HTTP or HTTPS) (case-sensitive).
        Port: 443 # Required. The port on which the load balancer is listening.
        SslPolicy: ELBSecurityPolicy-2016-08
        Certificates: # The ARN of the certificate (only one certficate ARN should be provided)
          - CertificateArn: "{{ https_certificate_arn }}"
        DefaultActions:
          - Type: forward # Required. Only 'forward' is accepted at this time
            TargetGroupName: "{{ elb_target_group_name }}" # Required. The name of the target group

- name: create elb
  elb_application_lb:
    access_logs_enabled: yes
    access_logs_s3_bucket: "{{ logging_bucket }}"
    access_logs_s3_prefix: "{{ elb_name }}-logs"
    name: "{{ elb_name }}"
    security_groups: "{{ security_group_ids }}"
    subnets: "{{ subnet_ids }}"
    listeners: "{{ aws_elb_instance_listeners }}"
    state: present
    tags:
       Service: "{{ service_name }}"
       Name: "{{ elb_name }}"  
