# - name: "Configure role with services needed for ECS"
#   iam_role:
#     name: "{{ ecs_instance_iam_role }}"
#     description: "Role for EC2 instances that are part of EC2 clusters"
#     assume_role_policy_document: "{{ lookup('file', 'iam_trust_policy.json')  }}"
#     managed_policy:
#       - arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceforEC2Role
#       - arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceRole
#     state: present
#   register: iam_machine_role

# - debug: var=iam_machine_role verbosity=2

- name: get ecs service details
  ecs_service_facts:
    cluster: "{{ cluster_name }}"
    service: "{{ svc_name }}"
    details: true
  register: ecs_service_facts_output
  
- set_fact:
    loadbalancers: "{{ ecs_service_facts_output.services[0].loadBalancers }}"
  when: ecs_service_facts_output.ansible_facts.services | count

- set_fact:
    loadbalancers: 
      - containerName: "{{ svc_container_name }}"
        containerPort: "{{ svc_container_port }}"
        loadBalancerName: "{{ elb_name }}"
  when: ecs_service_facts_output.ansible_facts.services == 0

- name: Create service to execute task
  ecs_service:
    state: present
    name: "{{ svc_name }}"
    region: "{{ aws_region }}"
    cluster: "{{ cluster_name }}"
    task_definition: '{{ svc_task_family }}'
    desired_count: "{{ svc_desired_count }}"
    deployment_configuration:
      minimum_healthy_percent: "{{ svc_min_healthy_percent }}"
      maximum_percent: "{{ svc_max_percent }}"
    # network_configuration:
    #   subnets: "{{ subnet_ids }}"
    #   security_groups: "{{ security_group_ids }}"
    load_balancers: "{{ loadbalancers }}"
